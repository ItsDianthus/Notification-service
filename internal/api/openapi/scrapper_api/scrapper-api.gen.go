// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package scrapper_api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// AddLinkRequest defines model for AddLinkRequest.
type AddLinkRequest struct {
	Filters *[]string `json:"filters,omitempty"`
	Link    *string   `json:"link,omitempty"`
	Tags    *[]string `json:"tags,omitempty"`
}

// ApiErrorResponse defines model for ApiErrorResponse.
type ApiErrorResponse struct {
	Code             *string   `json:"code,omitempty"`
	Description      *string   `json:"description,omitempty"`
	ExceptionMessage *string   `json:"exceptionMessage,omitempty"`
	ExceptionName    *string   `json:"exceptionName,omitempty"`
	Stacktrace       *[]string `json:"stacktrace,omitempty"`
}

// LinkResponse defines model for LinkResponse.
type LinkResponse struct {
	Filters *[]string `json:"filters,omitempty"`
	Id      *int64    `json:"id,omitempty"`
	Tags    *[]string `json:"tags,omitempty"`
	Url     *string   `json:"url,omitempty"`
}

// ListLinksResponse defines model for ListLinksResponse.
type ListLinksResponse struct {
	Links *[]LinkResponse `json:"links,omitempty"`
	Size  *int32          `json:"size,omitempty"`
}

// RemoveLinkRequest defines model for RemoveLinkRequest.
type RemoveLinkRequest struct {
	Link *string `json:"link,omitempty"`
}

// DeleteLinksParams defines parameters for DeleteLinks.
type DeleteLinksParams struct {
	TgChatId int64 `json:"Tg-Chat-Id"`
}

// GetLinksParams defines parameters for GetLinks.
type GetLinksParams struct {
	TgChatId int64 `json:"Tg-Chat-Id"`
}

// PostLinksParams defines parameters for PostLinks.
type PostLinksParams struct {
	TgChatId int64 `json:"Tg-Chat-Id"`
}

// DeleteLinksJSONRequestBody defines body for DeleteLinks for application/json ContentType.
type DeleteLinksJSONRequestBody = RemoveLinkRequest

// PostLinksJSONRequestBody defines body for PostLinks for application/json ContentType.
type PostLinksJSONRequestBody = AddLinkRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Убрать отслеживание ссылки
	// (DELETE /links)
	DeleteLinks(ctx echo.Context, params DeleteLinksParams) error
	// Получить все отслеживаемые ссылки
	// (GET /links)
	GetLinks(ctx echo.Context, params GetLinksParams) error
	// Добавить отслеживание ссылки
	// (POST /links)
	PostLinks(ctx echo.Context, params PostLinksParams) error
	// Удалить чат
	// (DELETE /tg-chat/{id})
	DeleteTgChatId(ctx echo.Context, id int64) error
	// Зарегистрировать чат
	// (POST /tg-chat/{id})
	PostTgChatId(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteLinks converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLinks(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteLinksParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Tg-Chat-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Tg-Chat-Id")]; found {
		var TgChatId int64
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Tg-Chat-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Tg-Chat-Id", valueList[0], &TgChatId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Tg-Chat-Id: %s", err))
		}

		params.TgChatId = TgChatId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Tg-Chat-Id is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLinks(ctx, params)
	return err
}

// GetLinks converts echo context to params.
func (w *ServerInterfaceWrapper) GetLinks(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLinksParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Tg-Chat-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Tg-Chat-Id")]; found {
		var TgChatId int64
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Tg-Chat-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Tg-Chat-Id", valueList[0], &TgChatId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Tg-Chat-Id: %s", err))
		}

		params.TgChatId = TgChatId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Tg-Chat-Id is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLinks(ctx, params)
	return err
}

// PostLinks converts echo context to params.
func (w *ServerInterfaceWrapper) PostLinks(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLinksParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Tg-Chat-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Tg-Chat-Id")]; found {
		var TgChatId int64
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Tg-Chat-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Tg-Chat-Id", valueList[0], &TgChatId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Tg-Chat-Id: %s", err))
		}

		params.TgChatId = TgChatId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Tg-Chat-Id is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLinks(ctx, params)
	return err
}

// DeleteTgChatId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTgChatId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTgChatId(ctx, id)
	return err
}

// PostTgChatId converts echo context to params.
func (w *ServerInterfaceWrapper) PostTgChatId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTgChatId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/links", wrapper.DeleteLinks)
	router.GET(baseURL+"/links", wrapper.GetLinks)
	router.POST(baseURL+"/links", wrapper.PostLinks)
	router.DELETE(baseURL+"/tg-chat/:id", wrapper.DeleteTgChatId)
	router.POST(baseURL+"/tg-chat/:id", wrapper.PostTgChatId)
}
